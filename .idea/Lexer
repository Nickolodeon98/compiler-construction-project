namespace JackCompiler
    {

public class Token {
  public enum TokenTypes {Keyw, Identifier, Constant, Symbol}

  ;
  public string Lexeme;
  public TokenTypes Type;


  public Token() {
    Lexeme = "";
  }
}
    }

class Lexer {
  private StreamReader CurStr;
  private int LinNum;

  //this finds the file and opens it.
  public bool init(string file_name) {
    if (!File.Exists(file_name)) {
      Console.WriteLine("File " + file_name + "does not exist.");
      return false;
    }

    try {
      CurStr = new StreamReader(file_name)
    } catch
    {
      Console.WriteLine("Unable to open file " + file_name);
      return false;
      f
    }
    LinNum = 1;
    return true;
  }

  public void CloseFile() {
    CurStr.Close();
  }

  public Token NextToken() {
    Token token = new Token();
    int c;

    //consume leading white space
    c = CurStr.Peek();
    while ((c != -1) && char.IsWhiteSpace((char) c)) {
      if (c == '\r')
        LinNum++;
      CurStr.Read();
      c = CurStr.Peek();
    }

    // To do: skip comments
    while (c == '/' || c == '*') {
      CurStr.Read();
      c = CurStr.Peek();
    }
    // extract the token
    if (c == -1) // is it eof
    {
      CurStr.Read();
      token.Type = Token.TokenTypes.EOF;
      return token;
      // jack program is to be compiled from here on lexer firstly.
    }

    //if it begins with a char/underscore then it is an identifier or a key/keyword
    if (char.IsLetter((char)c)) || (c == '_'))
    {
      while ((c != -1) && (char.IsLetter((char)c) || char.IsDigit((char)c)))
      {
        token.Lexeme += (char)c;
        CurStr.Read();
        c = CurStr.Peek();
      }
      token.Type = Token.TokenTypes.Identifier;
      return token;
    }

    if (char.IsDigit((char)c))
    {

      while ((c != -1) && char.IsDigit((char)c))
      {
        token.Lexeme += (char)c;
        CurStr.Read();
        c = CurStr.Peek();
      }
      token.Type = Token.TokenTypes.Constant;
      return token;
    }

    //the token is a symbol
    token.Lexeme += (char)c;
    CurStr.Read();
    token.Type = Token.TokenTypes.Symbol;

    return token;
  }
}